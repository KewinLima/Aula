#include <stdio.h>
#include <stdlib.h>

struct lista
{
    int num;
    struct lista *esq;
    struct lista *dir;
    struct lista *pai;
};

struct pilha
{
    struct lista *endereco;
    struct pilha *prox;
};

typedef struct lista Lista;
typedef struct pilha Pilha;
void addarvore(Lista *nodo, Lista *novo, char direcao);
void imprimearvore (Lista *nodo);
void buscarpre (Lista *raiz);
void addpilha (Pilha *cabeca, Pilha *novo);
void imprimepilha(Pilha *nodo);
int repeticao(Pilha *nodo, Lista *novo);

int main(void)
{
    Lista *cabeca;
    Lista m1 = {8, NULL, NULL, NULL};
    Lista m2 = {4, NULL, NULL, NULL};
    Lista m3 = {10, NULL, NULL, NULL};
    Lista m4 = {9 , NULL, NULL, NULL};
    Lista m5 = {2 , NULL, NULL, NULL};
    Lista m6 = {5 , NULL, NULL, NULL};
    Lista m7 = {1 , NULL, NULL, NULL};
    Lista m8 = {3 , NULL, NULL, NULL};
    Lista m9 = {7 , NULL, NULL, NULL};
    Lista m10 ={6, NULL, NULL, NULL};

    addarvore(&m1, &m2, 'e');
    addarvore(&m1, &m3, 'd');
    addarvore(&m2, &m5, 'e');
    addarvore(&m2, &m6, 'd');
    addarvore(&m3, &m4, 'e');
    addarvore(&m6, &m9, 'd');
    addarvore(&m9, &m10, 'e');
    addarvore(&m5, &m7, 'e');
    addarvore(&m5, &m8, 'd');
    buscarpre(&m1);
    return 0;
}

void addarvore(Lista *nodo, Lista *novo, char direcao)
{
    Lista *informacao;
    informacao = nodo;
    if(direcao == 'e')
    {
        nodo->esq = novo;
        nodo = novo;
    }
    else if(direcao == 'd')
    {
        nodo->dir = novo;
        nodo = novo;
    }
    nodo->pai = informacao;
    nodo->esq = NULL;
    nodo->dir = NULL;
}

void buscarpre (Lista *raiz)
{
    Lista *root;
    root = raiz;
    Pilha valor[100]={};
    unsigned int i=0, j=0, k=0;
    valor[i].endereco = raiz;
    printf("%d\n", raiz->num);
    i++;
    while(j!=1)//enquanto a raiz não aparecer 3 vezes
    {
        while(raiz->esq != NULL)
        {
            raiz = raiz->esq;
            printf("Andei esq \n");
            printf("estou %d\n", raiz->num);
            valor[i].endereco = raiz;
            addpilha(valor, &valor[i]);
            i++;
        }
        if(raiz->dir != NULL)
        {
            raiz = raiz->dir;
            printf("Andei dir \n");
            printf("estou %d\n", raiz->num);
            valor[i].endereco = raiz;
            addpilha(valor, &valor[i]);
            i++;
        }
        else
        {
            do//enquanto a raiz não aparecer 3 vezes
            {
               raiz = raiz->pai;
               printf("voltei p pai \n");
               printf("estou %d\n", raiz->num);
               valor[i].endereco = raiz;
               addpilha(valor, &valor[i]);
               k = repeticao(valor, raiz);
               i++;
            }while(k!=0);

            if(raiz->dir != NULL)
            {
                raiz = raiz->dir;
                valor[i].endereco = raiz;
                printf("Andei dir \n");
                printf("estou %d\n", raiz->num);
                addpilha(valor, &valor[i]);
                i++;
            }
            else
            {
                raiz = raiz->pai;
                valor[i].endereco = raiz;
                printf("voltei p pai \n");
                printf("estou %d\n", raiz->num);
                addpilha(valor, &valor[i]);
                i++;
            }
        }
        j = repeticao(valor, root);
    }
    imprimepilha(valor);
}

void addpilha (Pilha *cabeca, Pilha *novo)
{
        while(cabeca->prox!= NULL)
        {
            cabeca = cabeca->prox;
        }
        cabeca->prox = novo;
        cabeca = cabeca->prox;
        cabeca->prox = NULL;
}

int repeticao(Pilha *nodo, Lista *elemento)
{
    unsigned int i = 0;
     while(nodo != NULL)
    {
        if(nodo->endereco == elemento && nodo->endereco != NULL)
        {
            i++;
            if(i==3)
            {
                return 1;
            }
        }
        nodo = nodo->prox;
    }
    return 0;
}

void imprimepilha(Pilha *nodo)
{
    Lista *arvore;

    printf("NULL->");
    while(nodo != NULL)
    {
        arvore = nodo->endereco;
        printf("%d->", arvore->num);
        nodo = nodo->prox;
    }
    printf("NULL \n");
}
